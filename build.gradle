import java.nio.file.Files
buildscript {
  repositories {
	mavenCentral()
  }
  dependencies {
    classpath 'com.xlson.groovycsv:groovycsv:1.3'
	classpath 'org.apache.commons:commons-io:1.3.2'
  }
}
import org.apache.commons.io.FileUtils
import static com.xlson.groovycsv.CsvParser.parseCsv
import groovy.io.FileType

def outputDir = project.file('_output')

task generate {
  doLast {
    FileUtils.cleanDirectory(outputDir)
	def altSoundZip = new File('_input').listFiles().find{it.name.endsWith('.zip')}
	def altZipTree = zipTree(altSoundZip)
    for(line in parseCsv(new FileReader(altZipTree.matching { include 'altsound.csv'}.singleFile), separator: ',')) {
        // println "ID=$line.ID, Name=$line.NAME"
		def type = 'undefined'
		if (line.DUCK.trim() == '10') {
		  type = 'jingle'
		} else if (line.DUCK.trim() == '100') {
		  type = 'music'
		} else if (line.DUCK.trim() == '65') {
		  type = 'voice'
		} else if (line.DUCK.trim() == '80') {
		  type = 'sfx'
		} else {
		  println 'unknown DUCK value for ' + line.NAME + ':' + line.DUCK
		}
		def hex = line.ID
		def decimal = '' + Integer.parseInt(hex.substring(2), 16)
		decimal = decimal.padLeft(10, '0')
        println type + '=>' + decimal + "=" + line.NAME
		def outDir = new File(outputDir, type + '/' + decimal + '-' + line.NAME)
		outDir.mkdirs()
		Files.copy(project.file(altZipTree.matching { include line.FNAME}.singleFile).toPath(), new File(outDir, line.FNAME).toPath())
    }
  }
}

task convert {
  doLast {
    // for windows currently, change it for linux easily if you want
    def path2ffmeg = '_ffmpeg/bin/ffmpeg.exe'
	if (!project.file(path2ffmeg).exists()) {
	  throw new Exception('Please put ffmeg into ' + path2ffmeg)
	}
	boolean hadErrors = false
    outputDir.eachFileRecurse (FileType.FILES) { file ->
      if (file.name.endsWith('.ogg')) {
	    def targetFile = new File(file.getParentFile(), file.name.substring(0,file.name.length()-4) + '.wav')
        println 'converting ' + file.path + ' to ' + targetFile.path
        def pmdCommand = "_ffmpeg/bin/ffmpeg.exe -i ${file.path} -af volume=5dB ${targetFile.path }"
        def sout = new StringBuffer()
        def serr = new StringBuffer()
        def process = pmdCommand.execute()
        process.consumeProcessOutput(sout, serr)
        process.waitForProcessOutput()
		def exitValue = process.exitValue()
		if (exitValue == 0) {
		  file.delete()
		} else {
		  hadErrors = true
          System.out << '    ffmpeg error output =>' + serr.toString()
		  println "There was a problem while converting ${file.path}. Please try yourself:${pmdCommand}"
		}
	  }
    }
	if (hadErrors) {
	  throw new Exception('Some files could not be converted. Try convert again and check output.')
	}
	
  }
}